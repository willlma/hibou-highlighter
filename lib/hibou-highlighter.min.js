!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("highlighter",[],t):"object"==typeof exports?exports.highlighter=t():e.highlighter=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(1);Object.defineProperty(t,"changeSelectedHighlight",{enumerable:!0,get:function(){return o.changeSelectedHighlight}}),Object.defineProperty(t,"showScrollIndicator",{enumerable:!0,get:function(){return o.showScrollIndicator}}),Object.defineProperty(t,"scrollToHighlight",{enumerable:!0,get:function(){return o.scrollToHighlight}});var i=n(3);Object.defineProperty(t,"highlight",{enumerable:!0,get:function(){return i.highlight}}),Object.defineProperty(t,"highlightRange",{enumerable:!0,get:function(){return i.highlightRange}});var a=n(7);Object.defineProperty(t,"removeHylytElems",{enumerable:!0,get:function(){return r(a).default}});var l=n(8);Object.defineProperty(t,"restore",{enumerable:!0,get:function(){return r(l).default}})},function(e,t,n){"use strict";function r(e){for(var t=e.length;t--;)e[t].classList.toggle("hi-selected")}function o(){var e=document.querySelector(".hi-scroll-indicator.active");e&&e.classList.remove("active")}function i(e){return document.querySelector((0,f.getIndicatorSelector)(e.id))}function a(e,t){e&&r(e.elems),o(),t&&(g(t),e!==t&&r(t.elems),i(t).classList.add("active"))}function l(e){return(e[0].getBoundingClientRect().top+e[e.length-1].getBoundingClientRect().bottom)/2+window.scrollY}function c(e,t){var n=document.createElement("div");return n.className=(0,f.getIndicatorClassName)(e.id),document.body.appendChild(n),n.addEventListener("click",function(n){window.scrollTo(0,(l(e.elems)-window.innerHeight)/2),t&&t(e,n)}),n}function d(e,t){var n=l(e.elems),r=n/document.documentElement.scrollHeight*window.innerHeight;t||(t=i(e)),t.style.top=r-10+"px"}function u(e,t){var n=c(e,t);d(e,n)}function s(e){var t=l(e.elems);window.scrollTo((t-window.innerHeight)/2)}Object.defineProperty(t,"__esModule",{value:!0}),t.changeSelectedHighlight=a,t.placeScrollIndicator=d,t.addScrollIndicator=u,t.scrollToHighlight=s;var f=n(2),g=function(e){return setTimeout(function(){if(e&&e.elems&&e.elems.length){var t=document.getSelection();if(t){t.removeAllRanges();var n=document.createRange();n.setStartBefore(e.elems[0]),n.setEndAfter(e.elems[e.elems.length-1]),t.addRange(n)}}})}},function(e,t){"use strict";function n(e){return"hi-scroll-indicator hi-"+e}function r(e){return".hi-scroll-indicator.hi-"+e}Object.defineProperty(t,"__esModule",{value:!0}),t.getIndicatorClassName=n,t.getIndicatorSelector=r;t.tagName="hylyt",t.rangeNotTextNodeError="Range start or end is not a text node.",t.nodeWithoutParent="Can't replace node. Doesn't have a parent"},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){var t=(e.commonAncestorContainer.parentElement||document.body).cloneNode(!1);return t.appendChild(e.cloneContents()),t.innerHTML}function i(e){var t=e.startContainer,n=e.endContainer;return t instanceof Text&&n instanceof Text&&t.parentElement&&t.parentElement.localName!==m.tagName&&n.parentElement&&n.parentElement.localName!==m.tagName}function a(e,t,n){if(!i(t))return null;var r=t.startContainer,a=t.endContainer,l=(0,d.getLocation)(r),c=(0,d.getLocation)(a),u={id:e,html:o(t),startSelector:(0,s.default)(r),startNodeIndex:l.index,startOffset:t.startOffset+l.offset,endSelector:(0,s.default)(a),endNodeIndex:c.index,endOffset:t.endOffset+c.offset,deleted:!1,elems:(0,g.default)(t,function(e){return n&&n(u,e)})};return u}function l(e,t,n){var r=0,o=e.getRangeAt(0),l=o.startOffset,c=o.startContainer,d=o.endContainer;if(o.collapsed||!i(o)||c===d&&o.endOffset-l<3)return null;o.commonAncestorContainer.normalize();for(var u=e.rangeCount-1;r<u&&o.endContainer.nodeType!==Node.TEXT_NODE;r++){var s=e.getRangeAt(r);o.setEnd(s.endContainer,s.endOffset)}for(var f=/[^\w']/g,g=0;f.lastIndex<=l&&(g=f.lastIndex,f.exec(o.startContainer.textContent)););o.setStart(o.startContainer,g),f.lastIndex=0;var m=o.endContainer.textContent.substr(o.endOffset);g=m.search(f),g===-1&&(g=m.length),o.setEnd(o.endContainer,o.endOffset+g);var v=a(t,o,n);return v?((0,h.addScrollIndicator)(v,n),n&&n(v),v):null}function c(e,t){var n=getSelection();return n&&!n.isCollapsed?l(n,e,t):null}Object.defineProperty(t,"__esModule",{value:!0}),t.isValidRange=i,t.highlightRange=a,t.highlight=c;var d=n(4),u=n(5),s=r(u),f=n(6),g=r(f),h=n(1),m=n(2)},function(e,t){"use strict";function n(e){var t=e.parentNode||document.body,n=[].indexOf.call(t.childNodes,e),r=o.get(t);if(!r)return{index:n,offset:0};for(var i in r){i*=1;var a=r[i];if(i>n)break;if(n>=a.length+i)n-=a.length;else if(n>i)return{index:i,offset:a[n-i-1]};if(i===n){var l=a.length;return{index:n,offset:l?a[l-1]:0}}}return{index:n,offset:0}}function r(e,t){if(!t||t===e.data.length)return e;var r={node:e},i=e.splitText(t),a=n(e),l=o.get(r);return l||(l=[],o.set(r,l)),l[a.index]||(l[a.index]=[]),l[a.index].push(a.offset+t),l[a.index].sort(function(e,t){return e-t}),i}Object.defineProperty(t,"__esModule",{value:!0}),t.getLocation=n,t.splitText=r;var o=new WeakMap},function(e,t){"use strict";function n(e){e.nodeType===Node.TEXT_NODE&&(e=e.parentNode);var t=e.ownerDocument;if(e.id&&t.getElementById(e.id)===e)return"#"+e.id;var o=e.tagName.toLowerCase();if("html"===o||"head"===o||"body"===o)return o;e.parentNode||console.warn("danger: "+o);var i,a=function(e){try{if(1===t.querySelectorAll(e).length)return!0}catch(e){}return!1};if(e.classList.length>0)for(var l=0;l<e.classList.length;l++){if(i="."+e.classList.item(l),a(i))return i;if(i=o+i,a(i))return i;if(i+=r(e),a(i))return i}return i=n(e.parentNode)+" > "+o+r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=n;var r=function(e){for(var t=[].slice.call(e.parentNode.children),n=t.length;n--;)t[n].localName!==e.localName&&[].splice.call(t,n,1);var r=[].indexOf.call(t,e)+1;return":nth-of-type("+r+")"};e.exports=t.default},function(e,t,n){"use strict";function r(e){var t=document.createElement(a.tagName);t.textContent=e.textContent;var n=e.parentNode;if(!n)throw new Error(a.nodeWithoutParent);return n.replaceChild(t,e),t}function o(e){return!/\S/.test(e.textContent)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e.startOffset,l=e.startContainer,c=e.endContainer,d=e.endOffset;if(!(l instanceof Text&&c instanceof Text))throw new Error(a.rangeNotTextNodeError);(0,i.splitText)(c,d),e.setStart((0,i.splitText)(l,n),0);for(var u,s=document.createNodeIterator(e.commonAncestorContainer,NodeFilter.SHOW_TEXT,function(t){return e.intersectsNode(t)&&!o(t)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_REJECT}),f=[],g=1e3;g--&&(u=s.nextNode());)f.push(u);return f.map(function(e){var n=r(e);return n.addEventListener("click",t),n})};var i=n(4),a=n(2);e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.elems.forEach(function(e){var t=document.createTextNode(e.textContent);e.parentNode.replaceChild(t,e)}),(0,r.getScrollIndicator)(e).remove()};var r=n(1);e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){return document.querySelector(e).childNodes[t]}function i(e){var t=document.createRange(),n=void 0,r=void 0;return e.elems?(t.setStartBefore(e.elems[0]),t.setEndAfter(e.elems[e.elems.length-1])):(n=o(e.startSelector,e.startNodeIndex),r=o(e.endSelector,e.endNodeIndex),t.setStart(n,e.startOffset),t.setEnd(r,e.endOffset)),t}function a(e){e.forEach(function(e){return(0,l.placeScrollIndicator)(e)})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){Array.isArray(e)||(e=[e]),e.forEach(function(e){var n=i(e);(0,u.isValidRange)(n)&&(e.elems=(0,d.default)(n,function(n){return t&&t(e,n)}))});var n="#hi-";e.forEach(function(e){return(0,l.addScrollIndicator)(e,t)});var r=void 0;if(!location.hash.indexOf(n)){r=parseInt(location.hash.substr(n.length));var o=e.find(function(e){return e.id===r});o&&(0,l.scrollToHighlight)(o)}return window.onload=function(){a(e)},r};var l=n(1),c=n(6),d=r(c),u=n(3);e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,